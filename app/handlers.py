import re
from aiogram import types, Dispatcher, Router, F
from aiogram.filters import Command
from llm_api import generate_exercise
from prompts import exercise_prompt, check_answers_prompt
from storage import user_exercises

router = Router()


async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–£—Ä–æ–≤–µ–Ω—å, –¢–µ–º–∞, –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è</code>\n\n"
        "üìå –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>Intermediate, Past Simple, multiple-choice</code>\n\n"
        "üîé –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n"
        "<b>–£—Ä–æ–≤–µ–Ω—å:</b> Beginner, Intermediate, Advanced\n"
        "<b>–¢–µ–º–∞:</b> –ù–∞–ø—Ä–∏–º–µ—Ä, Past Simple, Present Continuous, Vocabulary\n"
        "<b>–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è:</b> multiple-choice (–≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)",
        parse_mode='HTML'
    )


async def generate_exercise_handler(message: types.Message):
    user_id = message.from_user.id
    try:
        level, topic, ex_type = map(str.strip, message.text.split(','))
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "<code>Intermediate, Past Simple, multiple-choice</code>",
            parse_mode='HTML'
        )
        return

    wait_msg = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–¥–∞–Ω–∏–µ...", parse_mode='HTML')

    prompt = exercise_prompt(level, topic, ex_type)
    llm_result = generate_exercise(prompt)

    await wait_msg.delete()

    cleaned_result = re.sub(r'<think>.*?</think>', '', llm_result, flags=re.DOTALL | re.IGNORECASE).strip()
    cleaned_result = re.split(r'Answers:', cleaned_result, flags=re.IGNORECASE)[0].strip()
    cleaned_result = re.split(r'Explanations:', cleaned_result, flags=re.IGNORECASE)[0].strip()

    user_exercises[user_id] = cleaned_result

    await message.answer(cleaned_result, parse_mode='HTML')
    await message.answer(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>1c, 2b, 3a</code>",
        parse_mode='HTML'
    )


async def incorrect_exercise_format_handler(message: types.Message):
    await message.answer(
        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –≤–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>Intermediate, Past Simple, multiple-choice</code>",
        parse_mode='HTML'
    )


async def check_answers_handler(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_exercises:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ –∑–∞–¥–∞–Ω–∏–µ!\n–û—Ç–ø—Ä–∞–≤—å:\n"
            "<code>Intermediate, Past Simple, multiple-choice</code>",
            parse_mode='HTML'
        )
        return

    exercise_text = user_exercises[user_id]
    user_answers = message.text.strip()

    wait_msg = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã...", parse_mode='HTML')

    prompt = check_answers_prompt(exercise_text, user_answers)
    result = generate_exercise(prompt)

    await wait_msg.delete()

    await message.answer(result, parse_mode='HTML')

    del user_exercises[user_id]


async def incorrect_answers_format_handler(message: types.Message):
    await message.answer(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>1c, 2b, 3a</code>",
        parse_mode='HTML'
    )


def register_handlers(dp: Dispatcher):
    router.message.register(start_command, Command("start"))

    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    router.message.register(
        generate_exercise_handler,
        F.text.regexp(r'^[A-Za-z]+,\s*[A-Za-z ]+,\s*[A-Za-z-]+$')
    )

    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤
    router.message.register(
        check_answers_handler,
        F.text.regexp(r'^(\d[a-d],\s*){2}\d[a-d]$')
    )

    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ (–ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏)
    router.message.register(
        incorrect_answers_format_handler,
        F.text.regexp(r'^\d.*'),
        lambda message: message.from_user.id in user_exercises
    )

    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∑–∞–¥–∞–Ω–∏—è (–≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö)
    router.message.register(incorrect_exercise_format_handler)

    dp.include_router(router)
