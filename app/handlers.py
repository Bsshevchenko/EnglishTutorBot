import re
from aiogram import types, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BotCommand
from llm_api import generate_exercise
from prompts import exercise_prompt, check_answers_prompt

router = Router()

class ExerciseState(StatesGroup):
    choosing_level = State()
    entering_topic = State()
    waiting_for_answers = State()

async def set_commands(bot):
    commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="level", description="üìö –°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"),
    ]
    await bot.set_my_commands(commands)

async def start_command(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Beginner")],
            [KeyboardButton(text="Intermediate")],
            [KeyboardButton(text="Advanced")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:",
        reply_markup=kb
    )
    await state.set_state(ExerciseState.choosing_level)

async def choose_level(message: types.Message, state: FSMContext):
    level = message.text.strip()

    if level not in ["Beginner", "Intermediate", "Advanced"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    await state.update_data(level=level)

    await message.answer(
        f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å: <b>{level}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n\n"
        "üìå –ù–∞–ø—Ä–∏–º–µ—Ä:\n<code>Past Simple</code>, <code>Present Continuous</code>, <code>Vocabulary</code>",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ExerciseState.entering_topic)

async def generate_exercise_handler(message: types.Message, state: FSMContext):
    topic = message.text.strip()
    user_data = await state.get_data()
    level = user_data['level']

    wait_msg = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–¥–∞–Ω–∏–µ...", parse_mode='HTML')

    prompt = exercise_prompt(level, topic, "multiple-choice")
    llm_result = generate_exercise(prompt)

    await wait_msg.delete()

    cleaned_result = re.sub(r'<think>.*?</think>', '', llm_result, flags=re.DOTALL | re.IGNORECASE).strip()
    cleaned_result = re.split(r'Answers:', cleaned_result, flags=re.IGNORECASE)[0].strip()
    cleaned_result = re.split(r'Explanations:', cleaned_result, flags=re.IGNORECASE)[0].strip()

    await state.update_data(exercise=cleaned_result)

    await message.answer(cleaned_result, parse_mode='HTML')
    await message.answer(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>1c, 2b, 3a</code>",
        parse_mode='HTML'
    )

    await state.set_state(ExerciseState.waiting_for_answers)

async def check_answers_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    exercise_text = user_data.get('exercise')
    user_answers = message.text.strip()

    wait_msg = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã...", parse_mode='HTML')

    prompt = check_answers_prompt(exercise_text, user_answers)
    result = generate_exercise(prompt)

    await wait_msg.delete()

    await message.answer(result, parse_mode='HTML')

    await message.answer(
        "üìå –í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Past Simple</code>, <code>Vocabulary</code>",
        parse_mode='HTML'
    )
    await state.set_state(ExerciseState.entering_topic)

async def incorrect_answers_format(message: types.Message):
    await message.answer(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>1c, 2b, 3a</code>",
        parse_mode='HTML'
    )

async def incorrect_topic_format(message: types.Message):
    await message.answer(
        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–º–∞.\n\n"
        "–í–≤–µ–¥–∏ —Ç–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n<code>Past Simple</code>, <code>Vocabulary</code>",
        parse_mode='HTML'
    )

async def level_command(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Beginner")],
            [KeyboardButton(text="Intermediate")],
            [KeyboardButton(text="Advanced")]
        ],
        resize_keyboard=True
    )
    await message.answer("üìö –í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:", reply_markup=kb)
    await state.set_state(ExerciseState.choosing_level)

async def not_allowed_input(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == ExerciseState.waiting_for_answers.state:
        await incorrect_answers_format(message)
    elif current_state == ExerciseState.entering_topic.state:
        await incorrect_topic_format(message)
    elif current_state == ExerciseState.choosing_level.state:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")

def register_handlers(dp: Dispatcher):
    router.message.register(start_command, CommandStart())
    router.message.register(level_command, Command("level"))

    router.message.register(
        choose_level,
        ExerciseState.choosing_level,
        F.text.in_(["Beginner", "Intermediate", "Advanced"])
    )

    router.message.register(
        generate_exercise_handler,
        ExerciseState.entering_topic,
        F.text
    )

    router.message.register(
        check_answers_handler,
        ExerciseState.waiting_for_answers,
        F.text.regexp(r'^(\d[a-d],\s*){2}\d[a-d]$')
    )

    router.message.register(
        not_allowed_input,
        ExerciseState.waiting_for_answers
    )

    router.message.register(
        incorrect_topic_format,
        ExerciseState.entering_topic
    )

    router.message.register(
        choose_level,
        ExerciseState.choosing_level
    )

    dp.include_router(router)
